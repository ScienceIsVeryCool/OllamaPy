name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: self-hosted
    permissions:
      contents: read
      checks: write
      pull-requests: write
    strategy:
      matrix:
        python-version: ['3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python Environment
      run: |
        echo "üêç Setting up Python environment (matching user instructions)..."
        python3 --version
        
        # Create virtual environment (as users would)
        python3 -m venv venv
        source venv/bin/activate
        pip install --upgrade pip
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          venv
        key: ${{ runner.os }}-venv-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-venv-${{ matrix.python-version }}-
          ${{ runner.os }}-venv-
    
    - name: Install dependencies (matching user instructions)
      run: |
        echo "üì¶ Installing dependencies (as users would with: pip install -e .)..."
        source venv/bin/activate
        
        # Install from source (matching user instructions)
        pip install -e .[dev]
        
        # Install additional test dependencies
        pip install toml psutil
        
        # Install editor dependencies for full testing
        pip install -e .[editor] || echo "Editor dependencies not available on this platform"
    
    - name: Lint with flake8
      run: |
        source venv/bin/activate
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Format check with black
      run: |
        source venv/bin/activate
        echo "üîç Running Black formatter check (warning-only)..."
        black --check --diff src/ tests/ --exclude="src/ollamapy/skillgen_report.py" || echo "‚ö†Ô∏è Black formatting suggestions found (not blocking pipeline)"
    
    - name: Run tests with pytest
      run: |
        source venv/bin/activate
        # Run tests with timeout to prevent hanging and exclude slow performance tests
        timeout 300 pytest tests/ -v --cov=src/ollamapy --cov-report=xml --cov-report=html --cov-report=term-missing --cov-fail-under=30 --junit-xml=pytest-results.xml -m "not slow" --tb=short
    
    - name: Run performance tests (optional)
      continue-on-error: true
      run: |
        source venv/bin/activate
        # Run performance tests with timeout - these can fail without breaking CI
        timeout 120 pytest tests/ -v -m "slow" --tb=short || echo "Performance tests completed with issues"
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          pytest-results.xml
          htmlcov/
          coverage.xml
        retention-days: 30
    
    
    - name: Test Flask server startup
      run: |
        source venv/bin/activate
        python3 -c "
        try:
            from src.ollamapy.skill_editor.api import SkillEditorAPI
            api = SkillEditorAPI(port=5555)
            print('‚úÖ Flask server can be imported and initialized')
        except ImportError as e:
            print(f'‚ö†Ô∏è  Flask dependencies not available: {e}')
        except Exception as e:
            print(f'‚ùå Error: {e}')
            raise
        "
    
    - name: Test basic CLI functionality
      run: |
        source venv/bin/activate
        ollamapy --hello
    
    - name: Test skill system integration
      run: |
        source venv/bin/activate
        python3 -c "
        try:
            from src.ollamapy.skills import SkillRegistry
            registry = SkillRegistry()
            print(f'‚úÖ Skills loaded: {len(registry.skills)} skills')
            assert len(registry.skills) > 0, 'No skills loaded'
        except ImportError as e:
            print(f'‚ö†Ô∏è  Skills module not available: {e}')
        except Exception as e:
            print(f'‚ö†Ô∏è  Skills system error (non-critical): {e}')
        "

  deploy-coverage:
    runs-on: self-hosted
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/fix-github-pages' || github.event_name == 'pull_request'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download test artifacts
      uses: actions/download-artifact@v4
      with:
        name: test-results-3.11
        path: ./coverage-reports
    
    - name: List downloaded files
      run: |
        echo "Listing contents of coverage-reports:"
        ls -la ./coverage-reports/
        echo "Looking for htmlcov directory:"
        find ./coverage-reports -name "htmlcov" -type d
    
    - name: Create deployment directory
      run: |
        mkdir -p ./pages-deploy
        
        # Copy main pages from docs directory
        if [ -d "./docs" ]; then
          echo "Copying docs directory contents"
          cp -r ./docs/* ./pages-deploy/
        fi
        
        # Generate skills showcase
        echo "Generating skills showcase"
        # Create temporary venv for showcase generation
        /usr/bin/python3.13 -m venv temp_venv
        source temp_venv/bin/activate
        python -m pip install --upgrade pip
        python -m pip install -e .
        python scripts/generate_skills_showcase.py
        deactivate
        
        # Copy coverage reports to coverage.html (rename from index.html)
        if [ -d "./coverage-reports/htmlcov" ]; then
          echo "Copying htmlcov directory to coverage.html"
          cp -r ./coverage-reports/htmlcov/* ./pages-deploy/
          
          # Rename the coverage index.html to coverage.html
          if [ -f "./pages-deploy/index.html" ]; then
            mv ./pages-deploy/index.html ./pages-deploy/coverage.html
            echo "Renamed coverage index.html to coverage.html"
          fi
          
          # Copy our main index.html back
          if [ -f "./docs/index.html" ]; then
            cp ./docs/index.html ./pages-deploy/index.html
            echo "Restored main index.html"
          fi
        else
          echo "htmlcov not found, coverage will not be available"
        fi
        
        echo "Final pages-deploy contents:"
        ls -la ./pages-deploy/
    
    - name: Setup Pages
      uses: actions/configure-pages@v5
    
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./pages-deploy
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  security:
    runs-on: self-hosted
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python Environment
      run: |
        echo "üêç Setting up Python environment for security checks..."
        python3 --version
        python3 -m venv venv
        source venv/bin/activate
        pip install --upgrade pip
    
    - name: Install security tools
      run: |
        source venv/bin/activate
        pip install bandit safety
    
    - name: Run security scan with bandit
      run: |
        source venv/bin/activate
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ --severity-level medium || true
    
    - name: Check for known vulnerabilities
      run: |
        source venv/bin/activate
        safety check --json --output safety-report.json || true
        safety check || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json