name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: self-hosted
    permissions:
      contents: read
      checks: write
      pull-requests: write
    strategy:
      matrix:
        python-version: ['3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python (use system Python)
      run: |
        # Use system Python which is available on the local runner
        python3 --version
        which python3
        # Ensure pip is available and up to date
        python3 -m pip install --upgrade pip
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          venv
        key: ${{ runner.os }}-venv-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-venv-${{ matrix.python-version }}-
          ${{ runner.os }}-venv-
    
    - name: Install dependencies
      run: |
        # Create and activate virtual environment
        python3 -m venv venv
        source venv/bin/activate
        python3 -m pip install --upgrade pip
        python3 -m pip install -e .[dev]
        # Install additional test dependencies
        python3 -m pip install toml psutil
        # Install editor dependencies for full testing
        python3 -m pip install -e .[editor] || echo "Editor dependencies not available on this platform"
    
    - name: Lint with flake8
      run: |
        source venv/bin/activate
        # Stop the build if there are Python syntax errors or undefined names
        python3 -m flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        python3 -m flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Format check with black
      run: |
        source venv/bin/activate
        python3 -m black --check --diff src/ tests/ --exclude="src/ollamapy/skillgen_report.py"
    
    - name: Run tests with pytest
      run: |
        source venv/bin/activate
        # Run tests with timeout to prevent hanging and exclude slow performance tests
        timeout 300 python3 -m pytest tests/ -v --cov=src/ollamapy --cov-report=xml --cov-report=html --cov-report=term-missing --cov-fail-under=70 --junit-xml=pytest-results.xml -m "not slow" --tb=short
    
    - name: Run performance tests (optional)
      continue-on-error: true
      run: |
        source venv/bin/activate
        # Run performance tests with timeout - these can fail without breaking CI
        timeout 120 python3 -m pytest tests/ -v -m "slow" --tb=short || echo "Performance tests completed with issues"
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          pytest-results.xml
          htmlcov/
          coverage.xml
        retention-days: 30
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true
    
    - name: Test Flask server startup
      run: |
        source venv/bin/activate
        python3 -c "
        try:
            from src.ollamapy.skill_editor.api import SkillEditorAPI
            api = SkillEditorAPI(port=5555)
            print('✅ Flask server can be imported and initialized')
        except ImportError as e:
            print(f'⚠️  Flask dependencies not available: {e}')
        except Exception as e:
            print(f'❌ Error: {e}')
            raise
        "
    
    - name: Test basic CLI functionality
      run: |
        source venv/bin/activate
        ollamapy --hello
    
    - name: Test skill system integration
      run: |
        source venv/bin/activate
        python3 -c "
        try:
            from src.ollamapy.skills import SkillRegistry
            registry = SkillRegistry()
            print(f'✅ Skills loaded: {len(registry.skills)} skills')
            assert len(registry.skills) > 0, 'No skills loaded'
        except ImportError as e:
            print(f'⚠️  Skills module not available: {e}')
        except Exception as e:
            print(f'⚠️  Skills system error (non-critical): {e}')
        "

  security:
    runs-on: self-hosted
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python (use system Python)
      run: |
        python3 --version
        python3 -m pip install --upgrade pip
    
    - name: Install security tools
      run: |
        python3 -m pip install bandit safety
    
    - name: Run security scan with bandit
      run: |
        python3 -m bandit -r src/ -f json -o bandit-report.json || true
        python3 -m bandit -r src/ --severity-level medium || true
    
    - name: Check for known vulnerabilities
      run: |
        python3 -m safety check --json --output safety-report.json || true
        python3 -m safety check || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json